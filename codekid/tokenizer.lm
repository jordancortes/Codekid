%{
    #include "y.tab.h"
    #import "Common.h"
    
    int yyparse(void);
    int yyerror(char*);
    int at = 0;
%}

%option yylineno
%option nounput
%option noyywrap

%%
[ \t]+

\n {
    
}

"-" {
    if ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"+"] || [Common isStringEqual:[Common topFromStack:[Common operators]] To:@"-"])
    {
        NSString *op = [Common popFromStack:[Common operators]];
        NSString *t2 = [Common popFromStack:[Common operands]];
        NSString *type_t2 = [Common popFromStack:[Common operandsTypes]];
        NSString *t1 = [Common popFromStack:[Common operands]];
        NSString *type_t1 = [Common popFromStack:[Common operandsTypes]];
        
        NSInteger result = [Common operationResultWithOperator:op Term1:type_t1 andTerm2:type_t2];
        
        if ( -1 != result )
        {
            [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvailWithPush:YES]];
            [Common pushToStack:[Common operandsTypes] Object:[NSString stringWithFormat:@"%d", result]];
        }
        else
        {
            return yyerror("");
        }
        
        while ((0 < [Common delParen]) && ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"("]))
        {
            [Common popFromStack:[Common operators]];
            [Common setDelParen:([Common delParen] - 1)];
        }
    }

    // 2
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return MINUS;
}

"+" {
    if ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"+"] || [Common isStringEqual:[Common topFromStack:[Common operators]] To:@"-"])
    {
        NSString *op = [Common popFromStack:[Common operators]];
        NSString *t2 = [Common popFromStack:[Common operands]];
        NSString *type_t2 = [Common popFromStack:[Common operandsTypes]];
        NSString *t1 = [Common popFromStack:[Common operands]];
        NSString *type_t1 = [Common popFromStack:[Common operandsTypes]];
        
        NSInteger result = [Common operationResultWithOperator:op Term1:type_t1 andTerm2:type_t2];
        
        if ( -1 != result )
        {
            [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvailWithPush:YES]];
            [Common pushToStack:[Common operandsTypes] Object:[NSString stringWithFormat:@"%d", result]];
        }
        else
        {
            return yyerror("");
        }
        
        while ((0 < [Common delParen]) && ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"("]))
        {
            [Common popFromStack:[Common operators]];
            [Common setDelParen:([Common delParen] - 1)];
        }
    }
    
    // 2
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return PLUS;
}

"*" {
    // 3
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return MULT;
}

"/" {
    // 3
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return DIV;
}

"=" {
    
    // 8
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return EQ;
}

"<" {

    // 8
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return LT;
}

">" {
    
    // 8
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return GT;
}

"(" {
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    return P_OPEN;
}

")" {
    
    //[Common popFromStack:[Common operators]];
    
    [Common setDelParen:([Common delParen] + 1)];
    
    return P_CLOSE;
}

"{" {
    return L_OPEN;
}

"}" {
    return L_CLOSE;
}

"[" {
    return B_OPEN;
}

"]" {
    return B_CLOSE;
}

";" {
    return END_EXP;
}

"when" {
    return _WHEN;
}

"start" {
    return _START;
}

"create" {
    return _CREATE;
}

"as" {
    return _AS;
}

"var"|"list" {
    // Asigna alfa (semantica)
    [Common setAlfa:[NSString stringWithUTF8String:yytext]];
    return _VAR_LIST;
}

"to" {
    return _TO;
}

"say" {
    // 37
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _SAY;
}

"for" {
    return _FOR;
}

"load" {
    // 43
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _LOAD;
}

"set" {
    // 38
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _SET;
}

"apply" {
    // 44
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _APPLY;
}

"scale" {
    // 45
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _SCALE;
}

"show" {
    // 40
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _SHOW;
}

"hide" {
    // 41
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _HIDE;
}

"clear" {
    // 42
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _CLEAR;
}

"if" {
    return _IF;
}

"else" {
    return _ELSE;
}

"repeat" {
    return _REPEAT;
}

"until" {
    if ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"wait"])
    {
        [Common popFromStack:[Common operators]];
        // 31
        [Common pushToStack:[Common operators] Object:@"WAIT_UNTIL"];
    }

    return _UNTIL;
}

"add" {
    // 35
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _ADD;
}

"delete" {
    at = 1;
    
    // 34
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return _DELETE;
}

"at" {
    at = 1;
    
    // 36
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return _AT;
}

"of" {
    return _OF;
}

"move" {
    // 31
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _MOVE;
}

"turn" {
    // 33
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _TURN;
}

"wait" {
    // 30
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _WAIT;
}

"contains" {
    // 26
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _CONTAINS;
}

"length" {
    // 28
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _LENGTH;
}

"item" {
    // 29
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return _ITEM;
}

[0-9]+ {
    if (1 == at)
    {
        [Common setPosition:[NSString stringWithUTF8String:yytext]];
        at = 0;
    }
    else
    {
        [Common setDType:@"int"];
    }
    
    // 1
    [Common pushToStack:[Common operands] Object:[NSString stringWithUTF8String:yytext]];
    [Common pushToStack:[Common operandsTypes] Object:@"int"];
    
    return CTE_INT;
}

[0-9]+"."[0-9]+ {
    [Common setDType:@"float"];
    
    // 1
    [Common pushToStack:[Common operands] Object:[NSString stringWithUTF8String:yytext]];
    [Common pushToStack:[Common operandsTypes] Object:@"float"];
    
    return CTE_FLOAT;
}

'[a-zA-Z0-9]*[ ","|"."|":"|";"|"<"|">"|"{"|"}"|"â€˜"|"="|"/"|"*"|"+"|"-"|"_"|"("|")"|"&"|"^"|"%"|"$"|"#"|"@"|"?"|"!"|"[" ]*' {
    [Common setDType:@"string"];
    
    // 1
    [Common pushToStack:[Common operands] Object:[NSString stringWithUTF8String:yytext]];
    [Common pushToStack:[Common operandsTypes] Object:@"string"];
    
    return CTE_STRING;
}

[a-z][a-zA-Z0-9]* {
    // Asigna beta (semantica)
    [Common setBeta:[NSString stringWithUTF8String:yytext]];

    // hace el lookup de la var
    if([Common flag] != FLAG_CREATE)
    {
        if (![Common lookupSymbol:[NSString stringWithUTF8String: yytext]])
        {
            return yyerror("");
        }
        
        // 1
        [Common pushToStack:[Common operands] Object:[NSString stringWithUTF8String:yytext]];
        if ( [Common dTypeForSymbol:[NSString stringWithUTF8String:yytext]] != nil )
        {
            [Common pushToStack:[Common operandsTypes] Object:[Common dTypeForSymbol:[NSString stringWithUTF8String:yytext]]];
        }
        else
        {
            [Common pushToStack:[Common operandsTypes] Object:@"undefined"];
        }
    }
    
    return VARIABLE;
}

. {
    yyerror(yytext);
}
%%

// Metodo que muestra los errores.
int yyerror(char *yytext)
{
    [Common setYyErrorNo:yylineno];
    return 1;
}

// Metodo principal de para el preprocesador.
int ext_scanner(const char *archivo)
{
    //**** INICIA RESET VARIABLES
    yylineno = 1;
    yy_buffer_stack = NULL;
    yy_buffer_stack_max = 0;
    yy_c_buf_p = NULL;
    yy_hold_char = '\0';
    yy_init = 0;
    yy_last_accepting_cpos = NULL;
    yy_last_accepting_state = 0;
    yy_n_chars = 0;
    yy_start = 0;
    yyin = NULL;
    yyleng = 0;
    yyout = NULL;
    yytext = NULL;
    //**** FIN RESET VARIABLES

    yyin = fopen(archivo, "r");
    int error = yyparse();
    
    if (error == 1)
    {
        return 1;
    }
    
    return 0;
}