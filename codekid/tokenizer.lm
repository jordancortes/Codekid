%{
    #include "y.tab.h"
    #import "Common.h"
    
    int yyparse(void);
    int yyerror(char*);
%}

%option yylineno
%option nounput
%option noyywrap

%%

\n {
    /* salta brincos por yylineno */
    [Common setYyErrorNo:yylineno];
}

"-" {
    // 13
    if ([Common isString:[Common topFromStack:[Common operators]] equalTo:@"+"] || [Common isString:[Common topFromStack:[Common operators]] equalTo:@"-"])
    {
        NSString *op = [Common popFromStack:[Common operators]];
        id term2 = [Common popFromStack:[Common operands]];
        NSString *term2_type = [Common popFromStack:[Common operandsType]];
        id term1 = [Common popFromStack:[Common operands]];
        NSString *term1_type = [Common popFromStack:[Common operandsType]];
        
        NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
        
        if (-1 == result)
        {
            [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
            return yyerror("");
        }
        
        NSInteger term1_address, term2_address;
        
        // TERM 1
        if ([term1 isKindOfClass:[Temporal class]])
        {
            term1_address = [term1 mem_address];
        }
        else if ([Common lookupVariable:(NSString *)term1])
        {
            term1_address = [Common addressForVariable:(NSString *)term1];
        }
        else
        {
            term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
        }
        
        // TERM 2
        if ([term2 isKindOfClass:[Temporal class]])
        {
            term2_address = [term2 mem_address];
        }
        else if ([Common lookupVariable:(NSString *)term2])
        {
            term2_address = [Common addressForVariable:(NSString *)term2];
        }
        else
        {
            term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
        }
        
        // CREATE TEMP
        Temporal *tn = [Common addTempWithType:result];
        [Common pushToStack:[Common operands] Object:tn];
        [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
        
        // CREATE QUADRUPLE
        [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
        
        while ( (0 < [Common del_paren]) && ([Common isString:[Common topFromStack:[Common operators]] equalTo:@"("]) )
        {
            [Common popFromStack:[Common operators]];
            [Common setDelParen:([Common del_paren] - 1)];
        }
    }

    // 11
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return MINUS;
}

"+" {
    // 13
    if ([Common isString:[Common topFromStack:[Common operators]] equalTo:@"+"] || [Common isString:[Common topFromStack:[Common operators]] equalTo:@"-"])
    {
        NSString *op = [Common popFromStack:[Common operators]];
        id term2 = [Common popFromStack:[Common operands]];
        NSString *term2_type = [Common popFromStack:[Common operandsType]];
        id term1 = [Common popFromStack:[Common operands]];
        NSString *term1_type = [Common popFromStack:[Common operandsType]];
        
        NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
        
        if (-1 == result)
        {
            [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
            return yyerror("");
        }
        
        NSInteger term1_address, term2_address;
        
        // TERM 1
        if ([term1 isKindOfClass:[Temporal class]])
        {
            term1_address = [term1 mem_address];
        }
        else if ([Common lookupVariable:(NSString *)term1])
        {
            term1_address = [Common addressForVariable:(NSString *)term1];
        }
        else
        {
            term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
        }
        
        // TERM 2
        if ([term2 isKindOfClass:[Temporal class]])
        {
            term2_address = [term2 mem_address];
        }
        else if ([Common lookupVariable:(NSString *)term2])
        {
            term2_address = [Common addressForVariable:(NSString *)term2];
        }
        else
        {
            term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
        }
        
        // CREATE TEMP
        Temporal *tn = [Common addTempWithType:result];
        [Common pushToStack:[Common operands] Object:tn];
        [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
        
        // CREATE QUADRUPLE
        [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
        
        while ( (0 < [Common del_paren]) && ([Common isString:[Common topFromStack:[Common operators]] equalTo:@"("]) )
        {
            [Common popFromStack:[Common operators]];
            [Common setDelParen:([Common del_paren] - 1)];
        }
    }

    // 11
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return PLUS;
}

"*" {
    // 3
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return MULT;
}

"/" {
    // 3
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return DIV;
}

"=" {
    // 5
    if ([Common isString:[Common topFromStack:[Common operators]] equalTo:@"+"] || [Common isString:[Common topFromStack:[Common operators]] equalTo:@"-"])
    {
        NSString *op = [Common popFromStack:[Common operators]];
        id term2 = [Common popFromStack:[Common operands]];
        NSString *term2_type = [Common popFromStack:[Common operandsType]];
        id term1 = [Common popFromStack:[Common operands]];
        NSString *term1_type = [Common popFromStack:[Common operandsType]];
        
        NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
        
        if (-1 == result)
        {
            [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
            return yyerror("");
        }
        
        NSInteger term1_address, term2_address;
        
        // TERM 1
        if ([term1 isKindOfClass:[Temporal class]])
        {
            term1_address = [term1 mem_address];
        }
        else if ([Common lookupVariable:(NSString *)term1])
        {
            term1_address = [Common addressForVariable:(NSString *)term1];
        }
        else
        {
            term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
        }
        
        // TERM 2
        if ([term2 isKindOfClass:[Temporal class]])
        {
            term2_address = [term2 mem_address];
        }
        else if ([Common lookupVariable:(NSString *)term2])
        {
            term2_address = [Common addressForVariable:(NSString *)term2];
        }
        else
        {
            term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
        }
        
        // CREATE TEMP
        Temporal *tn = [Common addTempWithType:result];
        [Common pushToStack:[Common operands] Object:tn];
        [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
        
        // CREATE QUADRUPLE
        [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
        
        while ( (0 < [Common del_paren]) && ([Common isString:[Common topFromStack:[Common operators]] equalTo:@"("]) )
        {
            [Common popFromStack:[Common operators]];
            [Common setDelParen:([Common del_paren] - 1)];
        }
    }

    // 8
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return EQUAL_THAN;
}

"<" {
    // 5
    if ([Common isString:[Common topFromStack:[Common operators]] equalTo:@"+"] || [Common isString:[Common topFromStack:[Common operators]] equalTo:@"-"])
    {
        NSString *op = [Common popFromStack:[Common operators]];
        id term2 = [Common popFromStack:[Common operands]];
        NSString *term2_type = [Common popFromStack:[Common operandsType]];
        id term1 = [Common popFromStack:[Common operands]];
        NSString *term1_type = [Common popFromStack:[Common operandsType]];
        
        NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
        
        if (-1 == result)
        {
            [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
            return yyerror("");
        }
        
        NSInteger term1_address, term2_address;
        
        // TERM 1
        if ([term1 isKindOfClass:[Temporal class]])
        {
            term1_address = [term1 mem_address];
        }
        else if ([Common lookupVariable:(NSString *)term1])
        {
            term1_address = [Common addressForVariable:(NSString *)term1];
        }
        else
        {
            term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
        }
        
        // TERM 2
        if ([term2 isKindOfClass:[Temporal class]])
        {
            term2_address = [term2 mem_address];
        }
        else if ([Common lookupVariable:(NSString *)term2])
        {
            term2_address = [Common addressForVariable:(NSString *)term2];
        }
        else
        {
            term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
        }
        
        // CREATE TEMP
        Temporal *tn = [Common addTempWithType:result];
        [Common pushToStack:[Common operands] Object:tn];
        [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
        
        // CREATE QUADRUPLE
        [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
        
        while ( (0 < [Common del_paren]) && ([Common isString:[Common topFromStack:[Common operators]] equalTo:@"("]) )
        {
            [Common popFromStack:[Common operators]];
            [Common setDelParen:([Common del_paren] - 1)];
        }
    }

    // 8
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return LESS_THAN;
}

">" {
    // 5
    if ([Common isString:[Common topFromStack:[Common operators]] equalTo:@"+"] || [Common isString:[Common topFromStack:[Common operators]] equalTo:@"-"])
    {
        NSString *op = [Common popFromStack:[Common operators]];
        id term2 = [Common popFromStack:[Common operands]];
        NSString *term2_type = [Common popFromStack:[Common operandsType]];
        id term1 = [Common popFromStack:[Common operands]];
        NSString *term1_type = [Common popFromStack:[Common operandsType]];
        
        NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
        
        if (-1 == result)
        {
            [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
            return yyerror("");
        }
        
        NSInteger term1_address, term2_address;
        
        // TERM 1
        if ([term1 isKindOfClass:[Temporal class]])
        {
            term1_address = [term1 mem_address];
        }
        else if ([Common lookupVariable:(NSString *)term1])
        {
            term1_address = [Common addressForVariable:(NSString *)term1];
        }
        else
        {
            term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
        }
        
        // TERM 2
        if ([term2 isKindOfClass:[Temporal class]])
        {
            term2_address = [term2 mem_address];
        }
        else if ([Common lookupVariable:(NSString *)term2])
        {
            term2_address = [Common addressForVariable:(NSString *)term2];
        }
        else
        {
            term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
        }
        
        // CREATE TEMP
        Temporal *tn = [Common addTempWithType:result];
        [Common pushToStack:[Common operands] Object:tn];
        [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
        
        // CREATE QUADRUPLE
        [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
        
        while ( (0 < [Common del_paren]) && ([Common isString:[Common topFromStack:[Common operators]] equalTo:@"("]) )
        {
            [Common popFromStack:[Common operators]];
            [Common setDelParen:([Common del_paren] - 1)];
        }
    }

    // 8
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return GREATER_THAN;
}


"(" {
    // 6
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return PARENTHESIS_OPEN;
}

")" {
    // 7
    [Common setDelParen:([Common del_paren] + 1)];

    return PARENTHESIS_CLOSE;
}

"{" {
    return BRACE_OPEN;
}

"}" {
    return BRACE_CLOSE;
}

"[" {
    return BRACKET_OPEN;
}

"]" {
    return BRACKET_CLOSE;
}

";" {
    return END_EXP;
}

"tostring" {
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _TOSTRING;
}

"check" {
    return _CHECK;
}

"events" {
    return _EVENTS;
}

"when" {
    return _WHEN;
}

"start" {
    return _START;
}

"create" {
    return _CREATE;
}

"as" {
    return _AS;
}

"int" {
    // alpha
    [Common setAlpha:[NSString stringWithUTF8String:yytext]];

    return _INT;
}

"float" {
    // alpha
    [Common setAlpha:[NSString stringWithUTF8String:yytext]];

    return _FLOAT;
}

"string" {
    // alpha
    [Common setAlpha:[NSString stringWithUTF8String:yytext]];

    return _STRING;
}

"bool" {
    // alpha
    [Common setAlpha:[NSString stringWithUTF8String:yytext]];

    return _BOOL;
}

"load" {
    // 42
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _LOAD;
}

"apply" {
    // 43
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return _APPLY;
}

"scale" {
    // 44
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return _SCALE;
}

"show" {
    // 39
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return _SHOW;
}

"hide" {
    // 40
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return _HIDE;
}

"clear" {
    // 41
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return _CLEAR;
}

"set" {
    // 38
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _SET;
}

"to" {
    return _TO;
}

"at" {
    return _AT;
}

"say" {
    // 37
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return _SAY;
}

"for" {
    return _FOR;
}

"if" {
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _IF;
}

"else" {
    return _ELSE;
}

"repeat" {
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _REPEAT;
}

"until" {
    // 38
    if ([Common isString:[Common topFromStack:[Common operators]] equalTo:@"wait"])
    {
        [Common popFromStack:[Common operators]];
        [Common pushToStack:[Common operators] Object:@"wait_until"];
    }
    
    // PUSH TO PJUMPS
    [Common pushToStack:[Common p_jumps] Object:[NSNumber numberWithInt:[Common nextPointer]]];

    return _UNTIL;
}

"of" {
    return _OF;
}

"move" {
    // 38
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _MOVE;
}

"turn" {
    // 38
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _TURN;
}

"wait" {
    // 38
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _WAIT;
}

"contains" {
    return _CONTAINS;
}

"length" {
    // 28
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];
    
    return _LENGTH;
}

"item" {
    // 29
    [Common pushToStack:[Common operators] Object:[NSString stringWithUTF8String:yytext]];

    return _ITEM;
}

[-]?[0-9]+ {
    // beta
    if ([Common flag] == FLAG_CREATE)
    {
        [Common setSigma:[NSString stringWithUTF8String:yytext]];
    }
    else
    {
        [Common pushToStack:[Common operands] Object:[NSString stringWithUTF8String:yytext]];
        [Common pushToStack:[Common operandsType] Object:@"int"];
    }
    return CTE_INT;
}

[-]?[0-9]+"."[0-9]+ {
    [Common pushToStack:[Common operands] Object:[NSString stringWithUTF8String:yytext]];
    [Common pushToStack:[Common operandsType] Object:@"float"];

    return CTE_FLOAT;
}

"true"|"false" {
    [Common pushToStack:[Common operands] Object:[NSString stringWithUTF8String:yytext]];
    [Common pushToStack:[Common operandsType] Object:@"bool"];

    return CTE_BOOL;
}

"'"[a-zA-Z0-9 ,.:;<>{}=*/+-_()&^%$@?![\]#]*"'" {
    [Common pushToStack:[Common operands] Object:[NSString stringWithUTF8String:yytext]];
    [Common pushToStack:[Common operandsType] Object:@"string"];

    return CTE_STRING;
}

[a-zA-Z][_a-zA-Z0-9]* {
    // beta
    if ([Common flag] == FLAG_CREATE)
    {
        if ([Common lookupVariable:[NSString stringWithUTF8String:yytext]])
        {
            [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is already declared.", [NSString stringWithUTF8String:yytext]]];
            return yyerror("");
        }
        
        [Common setBeta:[NSString stringWithUTF8String:yytext]];
    }
    else
    {
        if (![Common lookupVariable:[NSString stringWithUTF8String:yytext]])
        {
            [Common setYyError:[NSString stringWithFormat:@"The variable '%@' does not exists.", [NSString stringWithUTF8String:yytext]]];
            return yyerror("");
        }
        
        [Common pushToStack:[Common operands] Object:[NSString stringWithUTF8String:yytext]];
        [Common pushToStack:[Common operandsType] Object:[Common typeForCode:[Common typeForVariable:[NSString stringWithUTF8String:yytext]]]];
    }

    return ID;
}

[ \t]+ {
    /* salta espacios */
}

. {
    yyerror(yytext);
}

%%

int yyerror(char *yytext)
{
    if (strncmp(yytext, "", sizeof(int)) != 0)
    {
        [Common setYyError:[NSString stringWithUTF8String:yytext]];
    }
    
    return 1;
}

int ext_scanner(const char *archivo)
{
    //**** INICIA RESET VARIABLES
    yylineno = 1;
    yy_buffer_stack = NULL;
    yy_buffer_stack_max = 0;
    yy_c_buf_p = NULL;
    yy_hold_char = '\0';
    yy_init = 0;
    yy_last_accepting_cpos = NULL;
    yy_last_accepting_state = 0;
    yy_n_chars = 0;
    yy_start = 0;
    yyin = NULL;
    yyleng = 0;
    yyout = NULL;
    yytext = NULL;
    //**** FIN RESET VARIABLES
    
    yyin = fopen(archivo, "r");
    int error = yyparse();
    
    if (1 == error)
    {
        return 1;
    }
    
    return 0;
}