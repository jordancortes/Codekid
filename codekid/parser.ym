%{
    #import "Common.h"

    int yylex(void);
    int yyerror(char *);
%}

%token MINUS
%token PLUS
%token MULT
%token DIV
%token EQUAL_THAN
%token LESS_THAN
%token GREATER_THAN
%token PARENTHESIS_OPEN
%token PARENTHESIS_CLOSE
%token BRACE_OPEN
%token BRACE_CLOSE
%token BRACKET_OPEN
%token BRACKET_CLOSE
%token END_EXP
%token _WHEN
%token _START
%token _CREATE
%token _AS
%token _INT
%token _FLOAT
%token _STRING
%token _BOOL
%token _LOAD
%token _APPLY
%token _SCALE
%token _SHOW
%token _HIDE
%token _CLEAR
%token _SET
%token _TO
%token _AT
%token _SAY
%token _FOR
%token _IF
%token _ELSE
%token _REPEAT
%token _UNTIL
%token _OF
%token _MOVE
%token _TURN
%token _WAIT
%token _CONTAINS
%token _LENGTH
%token _ITEM
%token CTE_INT
%token CTE_FLOAT
%token CTE_BOOL
%token CTE_STRING
%token ID

%start inicio

%error-verbose

%%

inicio:
        _WHEN _START BRACE_OPEN inicioAux inicioAux2 modulo moduloAux BRACE_CLOSE
        ;

inicioAux:
        /* epsilon */ { [Common setFlag:FLAG_EVENT]; }
        | creaVar inicioAux
        ;

moduloAux:
        /* epsilon */
        | modulo moduloAux
        ;

creaVar:
        _CREATE var _AS tipo creaVarAux END_EXP
            {
                if([Common addVariableWithName:[Common beta] Type:[Common codeForType:[Common alpha]] andListLength:[[Common sigma] intValue]])
                {
                    [Common setAlpha:@""];
                    [Common setBeta:@""];
                    [Common setSigma:@"1"];
                }
                else
                {
                    yyerror("");
                }
                
            }
        ;

creaVarAux:
        /* epsilon */
        | BRACKET_OPEN CTE_INT BRACKET_CLOSE
        ;

inicioAux2:
        /* epsilon */
            {
                [Common setFlag:FLAG_MAIN];
                
                [Common addProcedureOfType:MAIN withPointer:[Common nextPointer]];
                
                NSNumber *last_pointer = [Common popFromStack:[Common p_jumps]];
                
                [Common setQuadruple:last_pointer withResult:[NSNumber numberWithInt:[Common nextPointer]]];
            }
        | evento inicioAux2
        ;

evento:
        _WHEN act93 BRACKET_OPEN expresion BRACKET_CLOSE BRACE_OPEN modulo moduloAux BRACE_CLOSE END_EXP
        ;

act93:
        /* epsilon */
            {
                if ([Common flag] == FLAG_EVENT)
                {
                    [Common addProcedureOfType:VOID withPointer:[Common nextPointer]];
                    [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:@"SUB"]] Term1:[NSNumber numberWithInt:-1] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:-1]];
                }
            }
        ;

modulo:
        ciclo
        | condicion
        | opVar
        | opTexto
        | opEspera
        | opImagen
        | opVisibilidad
        | opMovimiento
        ;

opVar:
        _SET var _TO expresion opVarAux END_EXP
        ;

opVarAux:
        /* epsilon */
            {
                // 21
                NSString *op = [Common popFromStack:[Common operators]];
                id value = [Common popFromStack:[Common operands]];
                NSString *value_type = [Common popFromStack:[Common operandsType]];
                NSString *variable = [Common popFromStack:[Common operands]];
                NSString *variable_type = [Common popFromStack:[Common operandsType]];

                // CHECK IS VALID OPERATION
                NSInteger result = [Common operationResultWithOperator:op Term1:variable_type andTerm2:value_type];
                
                if (-1 == result)
                {
                    [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ to %@' is invalid.", op, variable_type, value_type]];
                    return yyerror("");
                }
                
                NSInteger value_address, variable_address;
                
                // CHECK IS NOT LIST
                if ([Common isVariableList:variable])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", variable]];
                    return yyerror("");
                }
                
                variable_address = [Common addressForVariable:variable];
                
                // FOR VALUE
                if ([value isKindOfClass:[Temporal class]])
                {
                    value_address = [value mem_address];
                }
                else if ([Common lookupVariable:(NSString *)value])
                {
                    // CHECK IS NOT LIST
                    if ([Common isVariableList:value])
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", value]];
                        return yyerror("");
                    }
                    
                    value_address = [Common addressForVariable:(NSString *)value];
                }
                else
                {
                    value_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:value_type] andValue:(NSString *)value];
                }
                
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:value_address] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:variable_address]];
            }
        | _AT CTE_INT
        {
            // 20
            NSString *op = [Common popFromStack:[Common operators]];
            NSString *position = [Common popFromStack:[Common operands]];
            NSString *position_type = [Common popFromStack:[Common operandsType]];
            id value = [Common popFromStack:[Common operands]];
            NSString *value_type = [Common popFromStack:[Common operandsType]];
            NSString *variable = [Common popFromStack:[Common operands]];
            NSString *variable_type = [Common popFromStack:[Common operandsType]];
            
            // CHECK IS VALID OPERATION
            NSInteger result = [Common operationResultWithOperator:op Term1:variable_type andTerm2:value_type];
            
            if (-1 == result)
            {
                [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ to %@ at %@' is invalid.", op, variable_type, value_type, position_type]];
                return yyerror("");
            }
            
            NSInteger value_address, list_address;
            
            // CHECK IS NOT LIST
            if (![Common isVariableList:variable])
            {
                [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is not a list.", variable]];
                return yyerror("");
            }
            
            // MEM ADDRESS
            list_address = [Common addressForVariable:variable atPosition:[NSNumber numberWithInt:[position intValue]]];
            
            // OUT OF BOUNDS
            if (-1 == list_address)
            {
                [Common setYyError:[NSString stringWithFormat:@"The position '%@' is out of bounds for '%@'.", position, variable]];
                return yyerror("");
            }

            // VALOR
            if ([value isKindOfClass:[Temporal class]])
            {
                value_address = [value mem_address];
            }
            else if ([Common lookupVariable:(NSString *)value])
            {
                // CHECK IS NOT LIST
                if ([Common isVariableList:value])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", value]];
                    return yyerror("");
                }
                
                value_address = [Common addressForVariable:(NSString *)value];
            }
            else
            {
                value_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:value_type] andValue:(NSString *)value];
            }
            
            [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:value_address] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:list_address]];
        }
        ;

opTexto:
        _SAY cte _FOR exp END_EXP
        {
            NSString *op = [Common popFromStack:[Common operators]];
            id value = [Common popFromStack:[Common operands]];
            NSString *value_type = [Common popFromStack:[Common operandsType]];
            id text = [Common popFromStack:[Common operands]];
            NSString *text_type = [Common popFromStack:[Common operandsType]];
            
            if (INT != [Common lookupOperandCodeForKey:value_type])
            {
                [Common setYyError:[NSString stringWithFormat:@"The value in the operation '%@' is invalid. Is %@ and must be INT.", op, [value_type uppercaseString]]];
                return yyerror("");
            }
            
            if (STRING != [Common lookupOperandCodeForKey:text_type])
            {
                [Common setYyError:[NSString stringWithFormat:@"The value in the operation '%@' is invalid. Is %@ and must be STRING.", op, [text_type uppercaseString]]];
                return yyerror("");
            }
            
            NSInteger value_address, text_address;
            
            // FOR STRING
            if ([text isKindOfClass:[Temporal class]])
            {
                text_address = [text mem_address];
            }
            else if ([Common lookupVariable:(NSString *)text])
            {
                // CHECK IS NOT LIST
                if ([Common isVariableList:text])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", text]];
                    return yyerror("");
                }
                
                text_address = [Common addressForVariable:(NSString *)text];
            }
            else
            {
                text_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:text_type] andValue:(NSString *)text];
            }
            
            // FOR TIME
            if ([value isKindOfClass:[Temporal class]])
            {
                value_address = [value mem_address];
            }
            else if ([Common lookupVariable:(NSString *)value])
            {
                // CHECK IS NOT LIST
                if ([Common isVariableList:value])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", value]];
                    return yyerror("");
                }
            
                value_address = [Common addressForVariable:(NSString *)value];
            }
            else
            {
                value_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:value_type] andValue:(NSString *)value];
            }
            
            [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:value_address] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:text_address]];
        }
        ;

opEspera:
        _WAIT opEsperaAux END_EXP
        ;

opEsperaAux:
        cte
            {
                NSString *op = [Common popFromStack:[Common operators]];
                id value = [Common popFromStack:[Common operands]];
                NSString *value_type = [Common popFromStack:[Common operandsType]];
                
                // CHECK VALUE = INT
                if (INT != [Common lookupOperandCodeForKey:value_type])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The value in the operation '%@' is invalid. Is %@ and must be INT.", op, [value_type uppercaseString]]];
                    return yyerror("");
                }
                
                NSInteger value_address;
                
                // VALUE
                if ([value isKindOfClass:[Temporal class]])
                {
                    value_address = [value mem_address];
                }
                else if ([Common lookupVariable:(NSString *)value])
                {
                    // CHECK TERM1 IS SCALAR
                    if ([Common isVariableList:value])
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", value]];
                        return yyerror("");
                    }
                    
                    value_address = [Common addressForVariable:(NSString *)value];
                }
                else
                {
                    value_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:value_type] andValue:(NSString *)value];
                }
                
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:-1] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:value_address]];
            }
        | _UNTIL BRACKET_OPEN expresion act9 BRACKET_CLOSE
            {
                id value = [Common popFromStack:[Common operands]];
                NSString *value_type = [Common popFromStack:[Common operandsType]];
                NSNumber *pointer = [Common popFromStack:[Common p_jumps]];
                NSInteger value_address;
                
                // VALUE
                if ([value isKindOfClass:[Temporal class]])
                {
                    value_address = [value mem_address];
                }
                else if ([Common lookupVariable:(NSString *)value])
                {
                    // CHECK TERM1 IS SCALAR
                    if ([Common isVariableList:value])
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", value]];
                        return yyerror("");
                    }
                    
                    value_address = [Common addressForVariable:(NSString *)value];
                }
                else
                {
                    value_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:value_type] andValue:(NSString *)value];
                }
                
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:@"GOTOF"]] Term1:[NSNumber numberWithInt:value_address] Term2:[NSNumber numberWithInt:-1] andResult:pointer];
            }
        ;

act9:
        /* epsilon */
            {
                NSString *op = [Common popFromStack:[Common operators]];
                id value = [Common popFromStack:[Common operands]];
                NSString *value_type = [Common topFromStack:[Common operandsType]];
                
                // CHECK VALUE = BOOLEAN
                if (BOOLEAN != [Common lookupOperandCodeForKey:value_type])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The value in the operation '%@' is invalid. Is %@ and must be BOOLEAN.", op, [value_type uppercaseString]]];
                    return yyerror("");
                }
                
                NSInteger value_address;
                
                // VALUE
                if ([value isKindOfClass:[Temporal class]])
                {
                    value_address = [value mem_address];
                }
                else if ([Common lookupVariable:(NSString *)value])
                {
                    // CHECK TERM1 IS SCALAR
                    if ([Common isVariableList:value])
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", value]];
                        return yyerror("");
                    }
                    
                    value_address = [Common addressForVariable:(NSString *)value];
                }
                else
                {
                    value_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:value_type] andValue:(NSString *)value];
                }
                
                [Common popFromStack:[Common operandsType]]; // operandType
                
                [Common pushToStack:[Common p_jumps] Object:[NSNumber numberWithInt:[Common nextPointer]]];
                
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:@"GOTOF"]] Term1:[NSNumber numberWithInt:value_address] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:-1]];
            }
        ;

opImagen:
        _LOAD cte END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                id value = [Common popFromStack:[Common operands]];
                NSString *value_type = [Common popFromStack:[Common operandsType]];
                
                if (INT != [Common lookupOperandCodeForKey:value_type])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The value in the operation '%@' is invalid. Is %@ and must be INT.", op, [value_type uppercaseString]]];
                    return yyerror("");
                }
                
                NSInteger value_address;
                
                // VALUE
                if ([value isKindOfClass:[Temporal class]])
                {
                    value_address = [value mem_address];
                }
                else if ([Common lookupVariable:(NSString *)value])
                {
                    // CHECK IS NOT LIST
                    if ([Common isVariableList:value])
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", value]];
                        return yyerror("");
                    }
                
                    value_address = [Common addressForVariable:(NSString *)value];
                }
                else
                {
                    value_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:value_type] andValue:(NSString *)value];
                }
                
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:-1] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:value_address]];
            }
        | _APPLY cte END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                id value = [Common popFromStack:[Common operands]];
                NSString *value_type = [Common popFromStack:[Common operandsType]];
                
                if (INT != [Common lookupOperandCodeForKey:value_type])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The value in the operation '%@' is invalid. Is %@ and must be INT.", op, [value_type uppercaseString]]];
                    return yyerror("");
                }
                
                NSInteger value_address;
                
                // VALUE
                if ([value isKindOfClass:[Temporal class]])
                {
                    value_address = [value mem_address];
                }
                else if ([Common lookupVariable:(NSString *)value])
                {
                    // CHECK IS NOT LIST
                    if ([Common isVariableList:value])
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", value]];
                        return yyerror("");
                    }
                
                    value_address = [Common addressForVariable:(NSString *)value];
                }
                else
                {
                    value_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:value_type] andValue:(NSString *)value];
                }
                
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:-1] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:value_address]];
            }
        | _SCALE cte END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                id value = [Common popFromStack:[Common operands]];
                NSString *value_type = [Common popFromStack:[Common operandsType]];
                
                if (INT != [Common lookupOperandCodeForKey:value_type])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The value in the operation '%@' is invalid. Is %@ and must be INT.", op, [value_type uppercaseString]]];
                    return yyerror("");
                }
                
                NSInteger value_address;
                
                // VALUE
                if ([value isKindOfClass:[Temporal class]])
                {
                    value_address = [value mem_address];
                }
                else if ([Common lookupVariable:(NSString *)value])
                {
                    // CHECK IS NOT LIST
                    if ([Common isVariableList:value])
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", value]];
                        return yyerror("");
                    }
                    
                    value_address = [Common addressForVariable:(NSString *)value];
                }
                else
                {
                    value_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:value_type] andValue:(NSString *)value];
                }
                
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:-1] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:value_address]];
            }
        ;

opVisibilidad:
        _SHOW END_EXP
            {
                // 24
                NSString *op = [Common popFromStack:[Common operators]];
                
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:-1] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:-1]];
            }
        | _HIDE END_EXP
            {
                // 23
                NSString *op = [Common popFromStack:[Common operators]];
                
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:-1] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:-1]];
            }
        | _CLEAR END_EXP
            {
                // 22
                NSString *op = [Common popFromStack:[Common operators]];
                
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:-1] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:-1]];
            }
        ;

opMovimiento:
        _MOVE exp exp END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                id term2 = [Common popFromStack:[Common operands]];
                NSString *term2_type = [Common popFromStack:[Common operandsType]];
                id term1 = [Common popFromStack:[Common operands]];
                NSString *term1_type = [Common popFromStack:[Common operandsType]];
                
                // CHECK TERM1 = INT
                if (INT != [Common lookupOperandCodeForKey:term1_type])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The value in the operation '%@' is invalid. Is %@ and must be INT.", op, [term1_type uppercaseString]]];
                    return yyerror("");
                }
                
                // CHECK TERM2 = INT
                if (INT != [Common lookupOperandCodeForKey:term2_type])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The value in the operation '%@' is invalid. Is %@ and must be INT.", op, [term2_type uppercaseString]]];
                    return yyerror("");
                }
                
                NSInteger term1_address, term2_address;
                
                // TERM 1
                if ([term1 isKindOfClass:[Temporal class]])
                {
                    term1_address = [term1 mem_address];
                }
                else if ([Common lookupVariable:(NSString *)term1])
                {
                    // CHECK TERM1 IS SCALAR
                    if ([Common isVariableList:term1])
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", term1]];
                        return yyerror("");
                    }
                    
                    term1_address = [Common addressForVariable:(NSString *)term1];
                }
                else
                {
                    term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
                }
                
                // TERM 2
                if ([term2 isKindOfClass:[Temporal class]])
                {
                    term2_address = [term2 mem_address];
                }
                else if ([Common lookupVariable:(NSString *)term2])
                {
                    // CHECK TERM2 IS SCALAR
                    if ([Common isVariableList:term2])
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", term2]];
                        return yyerror("");
                    }
                
                    term2_address = [Common addressForVariable:(NSString *)term2];
                }
                else
                {
                    term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
                }
                
                // CREATE QUADRUPLE
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:term2_address]];
            }
        | _TURN exp END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                id term1 = [Common popFromStack:[Common operands]];
                NSString *term1_type = [Common popFromStack:[Common operandsType]];
                
                // CHECK TERM1 = INT
                if (INT != [Common lookupOperandCodeForKey:term1_type])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The value in the operation '%@' is invalid. Is %@ and must be INT.", op, [term1_type uppercaseString]]];
                    return yyerror("");
                }
                
                NSInteger term1_address;
                
                // TERM 1
                if ([term1 isKindOfClass:[Temporal class]])
                {
                    term1_address = [term1 mem_address];
                }
                else if ([Common lookupVariable:(NSString *)term1])
                {
                    // CHECK TERM1 IS SCALAR
                    if ([Common isVariableList:term1])
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", term1]];
                        return yyerror("");
                    }
                    
                    term1_address = [Common addressForVariable:(NSString *)term1];
                }
                else
                {
                    term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
                }
                
                // CREATE QUADRUPLE
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:-1] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:term1_address]];
            }
        ;

condicion:
        _IF BRACKET_OPEN expresion act9 BRACKET_CLOSE BRACE_OPEN modulo moduloAux BRACE_CLOSE condicionAux END_EXP
        ;

condicionAux:
        /* epsilon */
            {
                [Common setQuadruple:[Common popFromStack:[Common p_jumps]] withResult:[NSNumber numberWithInt:[Common nextPointer]]];
            }
        | act92 _ELSE BRACE_OPEN modulo moduloAux BRACE_CLOSE
            {
                [Common setQuadruple:[Common popFromStack:[Common p_jumps]] withResult:[NSNumber numberWithInt:[Common nextPointer]]];
            }
        ;

act92:
        /* epsilon */
            {
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:@"GOTO"]] Term1:[NSNumber numberWithInt:-1] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:-1]];
                [Common setQuadruple:[Common popFromStack:[Common p_jumps]] withResult:[NSNumber numberWithInt:[Common nextPointer]]];
                [Common pushToStack:[Common p_jumps] Object:[NSNumber numberWithInt:[Common nextPointer]-1]];
            }
        ;

ciclo:
        _REPEAT _UNTIL BRACKET_OPEN expresion act9 BRACKET_CLOSE BRACE_OPEN modulo moduloAux BRACE_CLOSE END_EXP
        {
            NSNumber *last_pointer = [Common popFromStack:[Common p_jumps]];
            NSNumber *recheck_pointer = [Common popFromStack:[Common p_jumps]];
            
            [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:@"GOTO"]] Term1:[NSNumber numberWithInt:-1] Term2:[NSNumber numberWithInt:-1] andResult:recheck_pointer];
            [Common setQuadruple:last_pointer withResult:[NSNumber numberWithInt:[Common nextPointer]]];
        }
        ;

expresion:
        exp expresionAux
        ;

expresionAux:
        /* epsilon */
        | LESS_THAN exp
            {
                // 9
                if ( [[Common topFromStack:[Common operators]] isEqualToString:@"<"] )
                {
                    NSString *op = [Common popFromStack:[Common operators]];
                    id term2 = [Common popFromStack:[Common operands]];
                    NSString *term2_type = [Common popFromStack:[Common operandsType]];
                    id term1 = [Common popFromStack:[Common operands]];
                    NSString *term1_type = [Common popFromStack:[Common operandsType]];
                    
                    NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
                    
                    if (-1 == result)
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
                        return yyerror("");
                    }
                    
                    NSInteger term1_address, term2_address;
                    
                    // TERM 1
                    if ([term1 isKindOfClass:[Temporal class]])
                    {
                        term1_address = [term1 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term1])
                    {
                        term1_address = [Common addressForVariable:(NSString *)term1];
                    }
                    else
                    {
                        term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
                    }
                    
                    // TERM 2
                    if ([term2 isKindOfClass:[Temporal class]])
                    {
                        term2_address = [term2 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term2])
                    {
                        term2_address = [Common addressForVariable:(NSString *)term2];
                    }
                    else
                    {
                        term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
                    }
                    
                    // CREATE TEMP
                    Temporal *tn = [Common addTempWithType:result];
                    [Common pushToStack:[Common operands] Object:tn];
                    [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
                    
                    // CREATE QUADRUPLE
                    [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
                    
                    while ( (0 < [Common del_paren]) && ([[Common topFromStack:[Common operators]] isEqualToString:@"("]) )
                    {
                        [Common popFromStack:[Common operators]];
                        [Common setDelParen:([Common del_paren] - 1)];
                    }
                }
            }
        | EQUAL_THAN exp
            {
                // 9
                if ( [[Common topFromStack:[Common operators]] isEqualToString:@"="] )
                {
                    NSString *op = [Common popFromStack:[Common operators]];
                    id term2 = [Common popFromStack:[Common operands]];
                    NSString *term2_type = [Common popFromStack:[Common operandsType]];
                    id term1 = [Common popFromStack:[Common operands]];
                    NSString *term1_type = [Common popFromStack:[Common operandsType]];
                    
                    NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
                    
                    if (-1 == result)
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
                        return yyerror("");
                    }
                    
                    NSInteger term1_address, term2_address;
                    
                    // TERM 1
                    if ([term1 isKindOfClass:[Temporal class]])
                    {
                        term1_address = [term1 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term1])
                    {
                        term1_address = [Common addressForVariable:(NSString *)term1];
                    }
                    else
                    {
                        term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
                    }
                    
                    // TERM 2
                    if ([term2 isKindOfClass:[Temporal class]])
                    {
                        term2_address = [term2 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term2])
                    {
                        term2_address = [Common addressForVariable:(NSString *)term2];
                    }
                    else
                    {
                        term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
                    }
                    
                    // CREATE TEMP
                    Temporal *tn = [Common addTempWithType:result];
                    [Common pushToStack:[Common operands] Object:tn];
                    [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
                    
                    // CREATE QUADRUPLE
                    [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
                    
                    while ( (0 < [Common del_paren]) && ([[Common topFromStack:[Common operators]] isEqualToString:@"("]) )
                    {
                        [Common popFromStack:[Common operators]];
                        [Common setDelParen:([Common del_paren] - 1)];
                    }
                }
            }
        | GREATER_THAN exp
            {
                // 9
                if ( [[Common topFromStack:[Common operators]] isEqualToString:@">"] )
                {
                    NSString *op = [Common popFromStack:[Common operators]];
                    id term2 = [Common popFromStack:[Common operands]];
                    NSString *term2_type = [Common popFromStack:[Common operandsType]];
                    id term1 = [Common popFromStack:[Common operands]];
                    NSString *term1_type = [Common popFromStack:[Common operandsType]];
                    
                    NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
                    
                    if (-1 == result)
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
                        return yyerror("");
                    }
                    
                    NSInteger term1_address, term2_address;
                    
                    // TERM 1
                    if ([term1 isKindOfClass:[Temporal class]])
                    {
                        term1_address = [term1 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term1])
                    {
                        term1_address = [Common addressForVariable:(NSString *)term1];
                    }
                    else
                    {
                        term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
                    }
                    
                    // TERM 2
                    if ([term2 isKindOfClass:[Temporal class]])
                    {
                        term2_address = [term2 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term2])
                    {
                        term2_address = [Common addressForVariable:(NSString *)term2];
                    }
                    else
                    {
                        term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
                    }
                    
                    // CREATE TEMP
                    Temporal *tn = [Common addTempWithType:result];
                    [Common pushToStack:[Common operands] Object:tn];
                    [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
                    
                    // CREATE QUADRUPLE
                    [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
                    
                    while ( (0 < [Common del_paren]) && ([[Common topFromStack:[Common operators]] isEqualToString:@"("]) )
                    {
                        [Common popFromStack:[Common operators]];
                        [Common setDelParen:([Common del_paren] - 1)];
                    }
                }
            }
        ;

exp:
        termino expAux
        ;

expAux:
        /* epsilon */
        | PLUS exp
            {
                // 5
                if ([[Common topFromStack:[Common operators]] isEqualToString:@"+"] || [[Common topFromStack:[Common operators]] isEqualToString:@"-"])
                {
                    NSString *op = [Common popFromStack:[Common operators]];
                    id term2 = [Common popFromStack:[Common operands]];
                    NSString *term2_type = [Common popFromStack:[Common operandsType]];
                    id term1 = [Common popFromStack:[Common operands]];
                    NSString *term1_type = [Common popFromStack:[Common operandsType]];
                    
                    NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
                    
                    if (-1 == result)
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
                        return yyerror("");
                    }
                    
                    NSInteger term1_address, term2_address;
                    
                    // TERM 1
                    if ([term1 isKindOfClass:[Temporal class]])
                    {
                        term1_address = [term1 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term1])
                    {
                        term1_address = [Common addressForVariable:(NSString *)term1];
                    }
                    else
                    {
                        term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
                    }
                    
                    // TERM 2
                    if ([term2 isKindOfClass:[Temporal class]])
                    {
                        term2_address = [term2 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term2])
                    {
                        term2_address = [Common addressForVariable:(NSString *)term2];
                    }
                    else
                    {
                        term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
                    }
                    
                    // CREATE TEMP
                    Temporal *tn = [Common addTempWithType:result];
                    [Common pushToStack:[Common operands] Object:tn];
                    [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
                    
                    // CREATE QUADRUPLE
                    [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
                    
                    while ( (0 < [Common del_paren]) && ([[Common topFromStack:[Common operators]] isEqualToString:@"("]) )
                    {
                        [Common popFromStack:[Common operators]];
                        [Common setDelParen:([Common del_paren] - 1)];
                    }
                }
            }
        | MINUS exp
            {
                // 5
                if ([[Common topFromStack:[Common operators]] isEqualToString:@"+"] || [[Common topFromStack:[Common operators]] isEqualToString:@"-"])
                {
                    NSString *op = [Common popFromStack:[Common operators]];
                    id term2 = [Common popFromStack:[Common operands]];
                    NSString *term2_type = [Common popFromStack:[Common operandsType]];
                    id term1 = [Common popFromStack:[Common operands]];
                    NSString *term1_type = [Common popFromStack:[Common operandsType]];
                    
                    NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
                    
                    if (-1 == result)
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
                        return yyerror("");
                    }
                    
                    NSInteger term1_address, term2_address;
                    
                    // TERM 1
                    if ([term1 isKindOfClass:[Temporal class]])
                    {
                        term1_address = [term1 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term1])
                    {
                        term1_address = [Common addressForVariable:(NSString *)term1];
                    }
                    else
                    {
                        term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
                    }
                    
                    // TERM 2
                    if ([term2 isKindOfClass:[Temporal class]])
                    {
                        term2_address = [term2 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term2])
                    {
                        term2_address = [Common addressForVariable:(NSString *)term2];
                    }
                    else
                    {
                        term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
                    }
                    
                    // CREATE TEMP
                    Temporal *tn = [Common addTempWithType:result];
                    [Common pushToStack:[Common operands] Object:tn];
                    [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
                    
                    // CREATE QUADRUPLE
                    [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
                    
                    while ( (0 < [Common del_paren]) && ([[Common topFromStack:[Common operators]] isEqualToString:@"("]) )
                    {
                        [Common popFromStack:[Common operators]];
                        [Common setDelParen:([Common del_paren] - 1)];
                    }
                }
            }
        ;

termino:
        factor terminoAux
        ;

terminoAux:
        /* epsilon */
        | MULT termino
        | DIV termino
        ;

factor:
        PARENTHESIS_OPEN expresion PARENTHESIS_CLOSE
            {
                while ( (0 < [Common del_paren]) && ([[Common topFromStack:[Common operators]] isEqualToString:@"("]) )
                {
                    [Common popFromStack:[Common operators]];
                    [Common setDelParen:([Common del_paren] - 1)];
                }
            
                // 5
                if ([[Common topFromStack:[Common operators]] isEqualToString:@"*"] || [[Common topFromStack:[Common operators]] isEqualToString:@"/"])
                {
                    NSString *op = [Common popFromStack:[Common operators]];
                    id term2 = [Common popFromStack:[Common operands]];
                    NSString *term2_type = [Common popFromStack:[Common operandsType]];
                    id term1 = [Common popFromStack:[Common operands]];
                    NSString *term1_type = [Common popFromStack:[Common operandsType]];
                    
                    NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
                    
                    if (-1 == result)
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
                        return yyerror("");
                    }
                    
                    NSInteger term1_address, term2_address;
                    
                    // TERM 1
                    if ([term1 isKindOfClass:[Temporal class]])
                    {
                        term1_address = [term1 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term1])
                    {
                        term1_address = [Common addressForVariable:(NSString *)term1];
                    }
                    else
                    {
                        term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
                    }
                    
                    // TERM 2
                    if ([term2 isKindOfClass:[Temporal class]])
                    {
                        term2_address = [term2 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term2])
                    {
                        term2_address = [Common addressForVariable:(NSString *)term2];
                    }
                    else
                    {
                        term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
                    }
                    
                    // CREATE TEMP
                    Temporal *tn = [Common addTempWithType:result];
                    [Common pushToStack:[Common operands] Object:tn];
                    [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
                    
                    // CREATE QUADRUPLE
                    [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
                    
                    while ( (0 < [Common del_paren]) && ([[Common topFromStack:[Common operators]] isEqualToString:@"("]) )
                    {
                        [Common popFromStack:[Common operators]];
                        [Common setDelParen:([Common del_paren] - 1)];
                    }
                }
            }
        | cte
            {
                // 5
                if ([[Common topFromStack:[Common operators]] isEqualToString:@"*"] || [[Common topFromStack:[Common operators]] isEqualToString:@"/"])
                {
                    NSString *op = [Common popFromStack:[Common operators]];
                    id term2 = [Common popFromStack:[Common operands]];
                    NSString *term2_type = [Common popFromStack:[Common operandsType]];
                    id term1 = [Common popFromStack:[Common operands]];
                    NSString *term1_type = [Common popFromStack:[Common operandsType]];
                    
                    NSInteger result = [Common operationResultWithOperator:op Term1:term1_type andTerm2:term2_type];
                    
                    if (-1 == result)
                    {
                        [Common setYyError:[NSString stringWithFormat:@"The operation '%@ %@ %@' is invalid.", term1_type, op, term2_type]];
                        return yyerror("");
                    }
                    
                    NSInteger term1_address, term2_address;
                    
                    // TERM 1
                    if ([term1 isKindOfClass:[Temporal class]])
                    {
                        term1_address = [term1 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term1])
                    {
                        // CHECK IS NOT LIST
                        if ([Common isVariableList:term1])
                        {
                            [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", term1]];
                            return yyerror("");
                        }
                        
                        term1_address = [Common addressForVariable:(NSString *)term1];
                    }
                    else
                    {
                        term1_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term1_type] andValue:(NSString *)term1];
                    }
                    
                    // TERM 2
                    if ([term2 isKindOfClass:[Temporal class]])
                    {
                        term2_address = [term2 mem_address];
                    }
                    else if ([Common lookupVariable:(NSString *)term2])
                    {
                        // CHECK IS NOT LIST
                        if ([Common isVariableList:term2])
                        {
                            [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is a list.", term2]];
                            return yyerror("");
                        }
                    
                        term2_address = [Common addressForVariable:(NSString *)term2];
                    }
                    else
                    {
                        term2_address = [Common addConstantWithType:[Common lookupOperandCodeForKey:term2_type] andValue:(NSString *)term2];
                    }
                    
                    // CREATE TEMP
                    Temporal *tn = [Common addTempWithType:result];
                    [Common pushToStack:[Common operands] Object:tn];
                    [Common pushToStack:[Common operandsType] Object:[Common typeForCode:result]];
                    
                    // CREATE QUADRUPLE
                    [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:term1_address] Term2:[NSNumber numberWithInt:term2_address] andResult:[NSNumber numberWithInt:[tn mem_address]]];
                    
                    while ( (0 < [Common del_paren]) && ([[Common topFromStack:[Common operators]] isEqualToString:@"("]) )
                    {
                        [Common popFromStack:[Common operators]];
                        [Common setDelParen:([Common del_paren] - 1)];
                    }
                }
            }
        ;

var:
        ID
        ;

tipo:
        _INT
        | _FLOAT
        | _BOOL
        | _STRING
        ;

cte:
        var
        | CTE_INT
        | CTE_FLOAT
        | CTE_BOOL
        | CTE_STRING
        | _LENGTH var
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *variable = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsType]]; // variable_type
                
                // CHECK IS LIST
                if (![Common isVariableList:variable])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is not a list.", variable]];
                    return yyerror("");
                }
                
                // MEM ADDRESSES
                NSInteger variable_address = [Common addressForVariable:variable];
                
                // CREATE TEMP
                Temporal *tn = [Common addTempWithType:INT];
                [Common pushToStack:[Common operands] Object:tn];
                [Common pushToStack:[Common operandsType] Object:[Common typeForCode:INT]];
                
                // CREATE QUADRUPLE
                [Common addQuadrupleWithOperator:[NSNumber numberWithInt:[Common lookupOperatorCodeForKey:op]] Term1:[NSNumber numberWithInt:variable_address] Term2:[NSNumber numberWithInt:-1] andResult:[NSNumber numberWithInt:[tn mem_address]]];
            }
        | _ITEM CTE_INT _OF var
            {
                [Common popFromStack:[Common operators]]; // op
                NSString *variable = [Common popFromStack:[Common operands]];
                NSString *variable_type = [Common popFromStack:[Common operandsType]];
                NSString *position = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsType]]; // position_type
                
                // CHECK IS LIST
                if (![Common isVariableList:variable])
                {
                    [Common setYyError:[NSString stringWithFormat:@"The variable '%@' is not a list.", variable]];
                    return yyerror("");
                }
                
                // MEM ADDRESS
                NSInteger list_address = [Common addressForVariable:variable atPosition:[NSNumber numberWithInt:[position intValue]]];
                
                // OUT OF BOUNDS
                if (-1 == list_address)
                {
                    [Common setYyError:[NSString stringWithFormat:@"The position '%@' is out of bounds for '%@'.", position, variable]];
                    return yyerror("");
                }
                
                // CREATE SPECIAL TEMP
                Temporal *tn = [[Temporal alloc] initWithName:@"_TP1_" andAddress:list_address];
                [Common pushToStack:[Common operands] Object:tn];
                [Common pushToStack:[Common operandsType] Object:variable_type];
            }
        ;

%%