%{
    #include <stdio.h>
    #include <stdlib.h>
    #import "Common.h"
    
    int yylex(void);
    int yyerror(char *);
%}

%token MINUS
%token PLUS
%token MULT
%token DIV
%token EQ
%token LT
%token GT
%token P_OPEN
%token P_CLOSE
%token L_OPEN
%token L_CLOSE
%token B_OPEN
%token B_CLOSE
%token END_EXP
%token _WHEN
%token _START
%token _CREATE
%token _AS
%token _VAR_LIST
%token _TO
%token _SAY
%token _FOR
%token _LOAD
%token _SET
%token _SCALE
%token _SHOW
%token _HIDE
%token _CLEAR
%token _IF
%token _ELSE
%token _REPEAT
%token _UNTIL
%token _ADD
%token _DELETE
%token _AT
%token _OF
%token _GO
%token _TURN
%token _WAIT
%token _CONTAINS
%token _LENGTH
%token _ITEM
%token CTE_INT
%token CTE_FLOAT
%token CTE_STRING
%token VARIABLE

%start inicio

%error-verbose

%%

inicio:
        _WHEN _START L_OPEN inicioAux inicioAux2 modulo inicioAux3 L_CLOSE { return 0; }
        ;

inicioAux:
        /* epsilon */
        | crea_var inicioAux
        ;

inicioAux2:
        /* epsilon */
        | evento inicioAux2
        ;

inicioAux3:
        /* epsilon */
        | modulo inicioAux3
        ;

crea_var:
        _CREATE cte _AS _VAR_LIST END_EXP
            {
                if (![Common addSymbolWithName:[Common beta] Type:[Common alfa] dType:nil initialize:NO andMemory:0 forKey:[Common beta]])
                {
                    return yyerror("");
                }
            }
        ;

evento:
        _WHEN B_OPEN expresion B_CLOSE L_OPEN modulo inicioAux3 L_CLOSE END_EXP
        ;

modulo:
        op_var
        | op_texto
        | op_imagen
        | op_visibilidad
        | op_lista
        | op_movimiento
        | op_espera
        | ciclo
        | condicion
        ;

op_var:
        _SET var _TO exp END_EXP
            {
                if (![Common initSymbol:[Common beta] for:@"var" withDType:[Common dType] atPosition:-1])
                {
                    return yyerror("");
                }
            }
        ;

op_texto:
        _SAY cte _FOR cte END_EXP
        ;

op_imagen:
        _LOAD cte END_EXP
        | _SET cte END_EXP
        | _SCALE cte END_EXP
        ;

op_visibilidad:
        _SHOW END_EXP
        | _HIDE END_EXP
        | _CLEAR END_EXP
        ;

op_lista:
        _ADD cte opListaAux
        | _DELETE cte _OF var END_EXP
            {
                if (![Common deleteFromList:[Common beta] atPosition:[Common position]])
                {
                    return yyerror("");
                }
            }
        ;

opListaAux:
        _AT cte _TO var END_EXP
            {
                if (![Common initSymbol:[Common beta] for:@"list" withDType:[Common dType] atPosition:[Common position]])
                {
                    return yyerror("");
                }
            }
        | _TO var END_EXP
            {
                if (![Common initSymbol:[Common beta] for:@"list" withDType:[Common dType] atPosition:-1])
                {
                    return yyerror("");
                }
            }
        ;

op_movimiento:
        _GO _TO cte cte END_EXP
        | _TURN cte END_EXP
        ;

op_espera:
        _WAIT opEsperaAux END_EXP
        ;

opEsperaAux:
        cte
        | _UNTIL expresion
        ;

ciclo:
        _REPEAT cicloAux L_OPEN modulo L_CLOSE END_EXP
        ;

cicloAux:
        cte
        | _UNTIL B_OPEN expresion B_CLOSE
        ;

condicion:
        _IF B_OPEN expresion B_CLOSE L_OPEN modulo L_CLOSE condicionAux END_EXP
        ;

condicionAux:
        /* epsilon */
        | _ELSE L_OPEN modulo L_CLOSE
        ;

expresion:
        exp expresionAux
        | var _CONTAINS cte
        ;

expresionAux:
        EQ exp
        | LT exp
        | GT exp
        ;

exp:
        termino expAux
        ;

expAux:
        /* epsilon */
        | PLUS exp
        | MINUS exp
        ;

termino:
        factor terminoAux
        ;

terminoAux:
        /* epsilon */
        | MULT termino
        | DIV termino
        ;

factor:
        P_OPEN expresion P_CLOSE
        | MINUS cte /* valor negativo */
        | cte
        ;

cte:
        var
        | CTE_INT
        | CTE_FLOAT
        | CTE_STRING
        | _LENGTH var
            {
                [Common setDType:@"int"];
            }
        | _ITEM CTE_INT _OF var
        ;

var:
        VARIABLE
        ;

%%