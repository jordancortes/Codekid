%{
    #include <stdio.h>
    #include <stdlib.h>
    #import "Common.h"
    
    int yylex(void);
    int yyerror(char *);
%}

%token MINUS
%token PLUS
%token MULT
%token DIV
%token EQ
%token LT
%token GT
%token P_OPEN
%token P_CLOSE
%token L_OPEN
%token L_CLOSE
%token B_OPEN
%token B_CLOSE
%token END_EXP
%token _WHEN
%token _START
%token _CREATE
%token _AS
%token _VAR_LIST
%token _TO
%token _SAY
%token _FOR
%token _LOAD
%token _APPLY
%token _SET
%token _SCALE
%token _SHOW
%token _HIDE
%token _CLEAR
%token _IF
%token _ELSE
%token _REPEAT
%token _UNTIL
%token _ADD
%token _DELETE
%token _AT
%token _OF
%token _MOVE
%token _TURN
%token _WAIT
%token _CONTAINS
%token _LENGTH
%token _ITEM
%token CTE_INT
%token CTE_FLOAT
%token CTE_STRING
%token VARIABLE

%start inicio

%error-verbose

%%

inicio:
        _WHEN _START L_OPEN inicioAux inicioAux2 modulo inicioAux3 L_CLOSE { return 0; }
        ;

inicioAux:
        /* epsilon */ { [Common setFlag:FLAG_EVENT]; }
        | crea_var inicioAux
        ;

inicioAux2:
        /* epsilon */ { [Common setFlag:FLAG_MODULE]; }
        | evento inicioAux2
        ;

inicioAux3:
        /* epsilon */
        | modulo inicioAux3
        ;

crea_var:
        _CREATE var _AS _VAR_LIST END_EXP
            {
                if (![Common addSymbolWithName:[Common beta] Type:[Common alfa] dType:nil initialize:NO andMemory:0 forKey:[Common beta]])
                {
                    return yyerror("");
                }
            }
        ;

evento:
        _WHEN B_OPEN expresion B_CLOSE L_OPEN modulo inicioAux3 L_CLOSE END_EXP
        ;

modulo:
        op_var
        | op_texto
        | op_imagen
        | op_visibilidad
        | op_lista
        | op_movimiento
        | op_espera
        | ciclo
        | condicion
        ;

op_var:
        _SET var _TO exp opVarAux END_EXP
            {
                if (![Common initSymbol:[Common beta] for:@"var" withDType:[Common dType] atPosition:-1])
                {
                    return yyerror("");
                }
            }
        ;

opVarAux:
        /* epsilon */
            {
                // 21
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]];
                NSString *r1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]];
                NSString *op = [Common popFromStack:[Common operators]];
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:@"" andResult:r1];
            }
        | _AT cte
        ;

op_texto:
        _SAY cte _FOR cte END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t2 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]];
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvail]];
            }
        ;

op_imagen:
        _LOAD cte END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]];
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:@"" andResult:[Common nextAvail]];
            }
        | _APPLY cte END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]];
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:@"" andResult:[Common nextAvail]];
            }
        | _SCALE cte END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]];
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:@"" andResult:[Common nextAvail]];
            }
        ;

op_visibilidad:
        _SHOW END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                [Common addQuadrupleWithOperator:op Term1:@"" Term2:@"" andResult:[Common nextAvail]];
            }
        | _HIDE END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                [Common addQuadrupleWithOperator:op Term1:@"" Term2:@"" andResult:[Common nextAvail]];
            }
        | _CLEAR END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                [Common addQuadrupleWithOperator:op Term1:@"" Term2:@"" andResult:[Common nextAvail]];
            }
        ;

op_lista:
        _ADD cte _TO var opListaAux END_EXP
        | _DELETE cte _OF var END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t2 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]]; /* TODO: que no sea lista */
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]]; /* TODO: que sea lista */
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvail]];
            
                if (![Common deleteFromList:[Common beta] atPosition:[Common position]])
                {
                    return yyerror("");
                }
            }
        ;

opListaAux:
        /* epsilon */
            {
                if (![Common initSymbol:[Common beta] for:@"list" withDType:[Common dType] atPosition:-1])
                {
                    return yyerror("");
                }
            }
        | _AT cte
            {
                if (![Common initSymbol:[Common beta] for:@"list" withDType:[Common dType] atPosition:[Common position]])
                {
                    return yyerror("");
                }
            }
        ;

op_movimiento:
        _MOVE cte cte END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t2 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]]; /* TODO: que no sea lista */
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]]; /* TODO: que no sea lista */
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvail]];
            }
        | _TURN cte END_EXP
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]]; /* TODO: que no sea lista */
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:@"" andResult:[Common nextAvail]];
            }
        ;

op_espera:
        _WAIT opEsperaAux END_EXP
        ;

opEsperaAux:
        cte
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]]; /* TODO: que no sea lista */
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:@"" andResult:[Common nextAvail]];
            }
        | _UNTIL B_OPEN expresion B_CLOSE
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]]; /* TODO: que no sea lista */
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:@"" andResult:[Common nextAvail]];
            }
        ;

ciclo:
        _REPEAT cicloAux L_OPEN modulo L_CLOSE END_EXP
        ;

cicloAux:
        cte
        | _UNTIL B_OPEN expresion B_CLOSE
        ;

condicion:
        _IF B_OPEN expresion B_CLOSE L_OPEN modulo L_CLOSE condicionAux END_EXP
        ;

condicionAux:
        /* epsilon */
        | _ELSE L_OPEN modulo L_CLOSE
        ;

expresion:
        exp expresionAux
        | var _CONTAINS cte
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t2 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]];
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvail]];
            }
        ;

expresionAux:
        /* epsilon */
        | EQ exp
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t2 = [Common popFromStack:[Common operands]];
                NSString *type_t2 = [Common popFromStack:[Common operandsTypes]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                NSString *type_t1 = [Common popFromStack:[Common operandsTypes]];
                
                NSInteger result = [Common operationResultWithOperator:op Term1:type_t1 andTerm2:type_t2];
                
                if ( -1 != result )
                {
                    [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvailWithPush:YES]];
                    [Common pushToStack:[Common operandsTypes] Object:[NSString stringWithFormat:@"%d", result]];
                }
                else
                {
                    return yyerror("");
                }
                
                while ((0 < [Common delParen]) && ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"("]))
                {
                    [Common popFromStack:[Common operators]];
                    [Common setDelParen:([Common delParen] - 1)];
                }
            }
        | LT exp
            {
                {
                    NSString *op = [Common popFromStack:[Common operators]];
                    NSString *t2 = [Common popFromStack:[Common operands]];
                    NSString *type_t2 = [Common popFromStack:[Common operandsTypes]];
                    NSString *t1 = [Common popFromStack:[Common operands]];
                    NSString *type_t1 = [Common popFromStack:[Common operandsTypes]];
                    
                    NSInteger result = [Common operationResultWithOperator:op Term1:type_t1 andTerm2:type_t2];
                    
                    if ( -1 != result )
                    {
                        [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvailWithPush:YES]];
                        [Common pushToStack:[Common operandsTypes] Object:[NSString stringWithFormat:@"%d", result]];
                    }
                    else
                    {
                        return yyerror("");
                    }
                    
                    while ((0 < [Common delParen]) && ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"("]))
                    {
                        [Common popFromStack:[Common operators]];
                        [Common setDelParen:([Common delParen] - 1)];
                    }
                }
            }
        | GT exp
            {
                {
                    NSString *op = [Common popFromStack:[Common operators]];
                    NSString *t2 = [Common popFromStack:[Common operands]];
                    NSString *type_t2 = [Common popFromStack:[Common operandsTypes]];
                    NSString *t1 = [Common popFromStack:[Common operands]];
                    NSString *type_t1 = [Common popFromStack:[Common operandsTypes]];
                    
                    NSInteger result = [Common operationResultWithOperator:op Term1:type_t1 andTerm2:type_t2];
                    
                    if ( -1 != result )
                    {
                        [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvailWithPush:YES]];
                        [Common pushToStack:[Common operandsTypes] Object:[NSString stringWithFormat:@"%d", result]];
                    }
                    else
                    {
                        return yyerror("");
                    }
                    
                    while ((0 < [Common delParen]) && ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"("]))
                    {
                        [Common popFromStack:[Common operators]];
                        [Common setDelParen:([Common delParen] - 1)];
                    }
                }
            }
        ;

exp:
        termino expAux
        ;

expAux:
        /* epsilon */
        | PLUS exp
            {
                if ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"+"] || [Common isStringEqual:[Common topFromStack:[Common operators]] To:@"-"])
                {
                    NSString *op = [Common popFromStack:[Common operators]];
                    NSString *t2 = [Common popFromStack:[Common operands]];
                    NSString *type_t2 = [Common popFromStack:[Common operandsTypes]];
                    NSString *t1 = [Common popFromStack:[Common operands]];
                    NSString *type_t1 = [Common popFromStack:[Common operandsTypes]];
                    
                    NSInteger result = [Common operationResultWithOperator:op Term1:type_t1 andTerm2:type_t2];
                    
                    if ( -1 != result )
                    {
                        [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvailWithPush:YES]];
                        [Common pushToStack:[Common operandsTypes] Object:[NSString stringWithFormat:@"%d", result]];
                    }
                    else
                    {
                        return yyerror("");
                    }
                    
                    while ((0 < [Common delParen]) && ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"("]))
                    {
                        [Common popFromStack:[Common operators]];
                        [Common setDelParen:([Common delParen] - 1)];
                    }
                }
            }
        | MINUS exp
            {
                if ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"+"] || [Common isStringEqual:[Common topFromStack:[Common operators]] To:@"-"])
                {
                    NSString *op = [Common popFromStack:[Common operators]];
                    NSString *t2 = [Common popFromStack:[Common operands]];
                    NSString *type_t2 = [Common popFromStack:[Common operandsTypes]];
                    NSString *t1 = [Common popFromStack:[Common operands]];
                    NSString *type_t1 = [Common popFromStack:[Common operandsTypes]];
                    
                    NSInteger result = [Common operationResultWithOperator:op Term1:type_t1 andTerm2:type_t2];
                    
                    if ( -1 != result )
                    {
                        [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvailWithPush:YES]];
                        [Common pushToStack:[Common operandsTypes] Object:[NSString stringWithFormat:@"%d", result]];
                    }
                    else
                    {
                        return yyerror("");
                    }
                    
                    while ((0 < [Common delParen]) && ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"("]))
                    {
                        [Common popFromStack:[Common operators]];
                        [Common setDelParen:([Common delParen] - 1)];
                    }
                }
            }
        ;

termino:
        factor terminoAux
        ;

terminoAux:
        /* epsilon */
        | MULT termino
        | DIV termino
        ;

factor:
        P_OPEN expresion P_CLOSE
        {
            if ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"*"] || [Common isStringEqual:[Common topFromStack:[Common operators]] To:@"/"])
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t2 = [Common popFromStack:[Common operands]];
                NSString *type_t2 = [Common popFromStack:[Common operandsTypes]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                NSString *type_t1 = [Common popFromStack:[Common operandsTypes]];
                
                NSInteger result = [Common operationResultWithOperator:op Term1:type_t1 andTerm2:type_t2];
                
                if ( -1 != result )
                {
                    [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvailWithPush:YES]];
                    [Common pushToStack:[Common operandsTypes] Object:[NSString stringWithFormat:@"%d", result]];
                }
                else
                {
                    return yyerror("");
                }
                
                while ((0 < [Common delParen]) && ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"("]))
                {
                    [Common popFromStack:[Common operators]];
                    [Common setDelParen:([Common delParen] - 1)];
                }
            }
        }
        | cte
        {
            if ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"*"] || [Common isStringEqual:[Common topFromStack:[Common operators]] To:@"/"])
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t2 = [Common popFromStack:[Common operands]];
                NSString *type_t2 = [Common popFromStack:[Common operandsTypes]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                NSString *type_t1 = [Common popFromStack:[Common operandsTypes]];
                
                NSInteger result = [Common operationResultWithOperator:op Term1:type_t1 andTerm2:type_t2];
                
                if ( -1 != result )
                {
                    [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvailWithPush:YES]];
                    [Common pushToStack:[Common operandsTypes] Object:[NSString stringWithFormat:@"%d", result]];
                }
                else
                {
                    return yyerror("");
                }
                
                while ((0 < [Common delParen]) && ([Common isStringEqual:[Common topFromStack:[Common operators]] To:@"("]))
                {
                    [Common popFromStack:[Common operators]];
                    [Common setDelParen:([Common delParen] - 1)];
                }
            }
        }
        ;

cte:
        var
        | CTE_INT
        | CTE_FLOAT
        | CTE_STRING
        | _LENGTH var
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]]; /*TODO: que sea lista */
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:@"" andResult:[Common nextAvail]];
            
                //[Common setDType:@"int"]; TODO: para que esta esto?
            }
        | _ITEM CTE_INT _OF var
            {
                NSString *op = [Common popFromStack:[Common operators]];
                NSString *t2 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]]; /* TODO: que sea int y que este dentro del rango*/
                NSString *t1 = [Common popFromStack:[Common operands]];
                [Common popFromStack:[Common operandsTypes]]; /* TODO: que sea lista */
                [Common addQuadrupleWithOperator:op Term1:t1 Term2:t2 andResult:[Common nextAvail]];
            }
        ;

var:
        VARIABLE
        ;

%%